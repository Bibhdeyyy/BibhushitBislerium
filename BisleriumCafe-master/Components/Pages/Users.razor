@page "/users"

@using BisleriumCafe.Model
@using BisleriumCafe.Services
@using BisleriumCafe.Shared


<div style="display:flex; justify-content:space-between">
    <p style="margin-left:250px;"><h1><b>🛡️Users</b></h1></p>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="OpenAddUserDialog">Add</MudButton>
</div>
<br />
<MudTable Items="@_users">
    <HeaderContent>
        <MudTh>User Name</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Created At</MudTh>
        <MudTh>Created By</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <span>@context.Username</span>
        </MudTd>
        <MudTd>
            <span>@context.Role.ToString()</span>
        </MudTd>
        <MudTd>
            <span>@context.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</span>
        </MudTd>
        <MudTd>
            @{
                var creator = UsersService.GetById(@context.CreatedBy);
                <span>@(creator == null ? "Unknown" : creator.Username)</span>
            }
        </MudTd>
        <MudTd>
            <MudButton Disabled="@(_globalState.CurrentUser != null ? _globalState.CurrentUser.Id == context.Id : false)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="()=>OpenDeleteUserDialog(context)">Delete</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>






@if (_showAddUserDialog)
{
    <ModalDialog Title="Add User" OnClose="@OnAddUserDialogClose" OkLabel="Add">
        <form>
            <div class="form-floating">
                <input type="text" class="form-control username" @bind="_username" placeholder="Username" />
                <label for="floatingInput">Username</label>
            </div><br/>
            <div class="form-floating mb-3">
                <input type="password" class="form-control password" @bind="_password" placeholder="Password" />
                <label for="floatingPassword">Password</label>
            </div>
            <div class="form-check">
                <input id="userRole" type="radio" class="form-check-input" name="role" value="@Role.Staff"
                       @onchange="RoleChangeHandler" checked="@(_role == Role.Staff)">
                <label class="form-check-label" for="userRole">@Role.Staff</label>
            </div>
            <div class="form-check">
                <input id="adminRole" type="radio" class="form-check-input" name="role" value="@Role.Admin"
                       @onchange="RoleChangeHandler" checked="@(_role == Role.Admin)">
                <label class="form-check-label" for="adminRole">@Role.Admin</label>
            </div>
            @if (!string.IsNullOrEmpty(_addUserErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_addUserErrorMessage" />
            }
        </form>
    </ModalDialog>
}

@if (_showDeleteUserDialog)
{
    <ModalDialog Title="Delete User" OnClose="@OnDeleteUserDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteUser.Username</strong> user data?</p>
        @if (!string.IsNullOrEmpty(_deleteUserErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteUserErrorMessage" />
        }
    </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<User> _users { get; set; }
    private bool _showAddUserDialog { get; set; }
    private bool _showDeleteUserDialog { get; set; }
    private string _addUserErrorMessage { get; set; }
    private string _deleteUserErrorMessage { get; set; }
    private User _deleteUser { get; set; }
    private string _username { get; set; }
    private string _password { get; set; }
    private Role _role { get; set; }

    protected override void OnInitialized()
    {
        _users = UsersService.GetAll();
    }

    private void OpenAddUserDialog()
    {
        _showAddUserDialog = true;
        _username = "";
        _password = "";
        _role = Role.Staff;
    }
    private void OnAddUserDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showAddUserDialog = false;
        }
        else
        {
            try
            {
                _addUserErrorMessage = "";
                _users = UsersService.Create(_globalState.CurrentUser.Id, _username, _password, _role);
                _showAddUserDialog = false;
            }
            catch (Exception e)
            {
                _addUserErrorMessage = e.Message;
            }
        }
    }

    private void RoleChangeHandler(ChangeEventArgs e)
    {
        _role = (Role)Enum.Parse(typeof(Role), e.Value.ToString());
    }

    private void OpenDeleteUserDialog(User user)
    {
        _deleteUser = user;
        _showDeleteUserDialog = true;
    }
    private void OnDeleteUserDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteUserDialog = false;
            _deleteUser = null;
        }
        else
        {
            try
            {
                _deleteUserErrorMessage = "";
                _users = UsersService.Delete(_deleteUser.Id);
                _showDeleteUserDialog = false;
                _deleteUser = null;
            }
            catch (Exception e)
            {
                _deleteUserErrorMessage = e.Message;
            }
        }
    }

}